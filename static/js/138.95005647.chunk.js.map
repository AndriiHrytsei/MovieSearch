{"version":3,"file":"static/js/138.95005647.chunk.js","mappings":"6PAKe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAS,mCAAG,WAAMC,GAAN,8EAChBN,EAAU,WADM,mBAGSO,EAAAA,EAAAA,GAAU,sCAAD,OACQD,EADR,8CAHlB,OAGRE,EAHQ,OAMdV,GAAS,GACTF,EAASY,GACTR,EAAU,YARI,kDAUdF,EAAS,KAAMW,SACfT,EAAU,YAXI,0DAAH,sDAuBf,OARAU,EAAAA,EAAAA,YAAU,WACRL,EAAUJ,EACX,GAAE,CAACA,IAMW,aAAXF,GACK,uBAAIF,IAGE,aAAXE,GAEA,kBAAMY,UAAU,wBAAhB,WACE,oBAAQC,KAAK,SAASC,QAAS,kBAAMV,GAAU,EAAhB,EAA/B,WACE,iBAAMQ,UAAU,4BAAhB,6BACA,0CAEF,iBAAKA,UAAU,eAAf,WACE,gBAAKA,UAAU,SAAf,UACE,gBACEG,IAAG,0CAAqCnB,EAAMoB,aAC9CC,IAAI,QAGR,4BACE,wBAAKrB,EAAMsB,OAAStB,EAAMuB,QAC1B,wCAAgBC,KAAKC,MAAMzB,EAAM0B,cAAjC,UACA,4BACE,sCACA,uBAAI1B,EAAM2B,eAEZ,4BACE,oCACA,uBACG3B,EAAM4B,OAAOC,KAAI,SAAAC,GAAK,OACrB,4BAAsBA,EAAMP,KAA5B,OAAWO,EAAMnB,GADI,gBAO/B,iBAAKK,UAAU,iBAAf,WACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAASe,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,8BAIN,SAAC,EAAAC,SAAD,CAAUC,UAAU,2CAApB,UACE,SAAC,KAAD,cA3CR,CAgDD,C,qFCvFc,SAAerB,EAA9B,+CAAe,OAAf,oBAAe,WAAyBsB,GAAzB,kGAEQC,MAAMD,GAFd,cAELE,EAFK,gBAGYA,EAAKC,OAHjB,cAGLxB,EAHK,yBAIJA,GAJI,2DAMJyB,QAAQC,OAAO,IAAIC,MAAM,KAAM1B,WAN3B,iF,sBCAf,SAAS2B,EAAmBC,EAAKC,EAASJ,EAAQK,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO/C,GAEP,YADAqC,EAAOrC,EAET,CAEI8C,EAAKE,KACPP,EAAQM,GAERX,QAAQK,QAAQM,GAAOE,KAAKP,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAInB,SAAQ,SAAUK,EAASJ,GACpC,IAAIG,EAAMW,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbR,EAAmBC,EAAKC,EAASJ,EAAQK,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdlB,EAAmBC,EAAKC,EAASJ,EAAQK,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/pages/MovieDetails/MovieDetails.jsx","fetchData.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useNavigate, useParams, Outlet, NavLink } from 'react-router-dom';\nimport fetchData from '../../../fetchData';\nimport { Suspense, useEffect, useState } from 'react';\n\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n\n  const getMovies = async id => {\n    setStatus('pending');\n    try {\n      const response = await fetchData(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=ee0ed139d0a1d8fcbabd26e40efda78c`\n      );\n      setError(false);\n      setMovie(response);\n      setStatus('resolved');\n    } catch (error) {\n      setError(error.message);\n      setStatus('rejected');\n    }\n  };\n\n  useEffect(() => {\n    getMovies(movieId);\n  }, [movieId]);\n\n  if (status === 'pending') {\n    <p>Loading...</p>;\n  }\n\n  if (status === 'rejected') {\n    return <p>{error}</p>;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <main className=\"movieDetailsContainer\">\n        <button type=\"button\" onClick={() => navigate(-1)}>\n          <span className=\"material-symbols-outlined\">arrow_left_alt</span>\n          <span>Go back</span>\n        </button>\n        <div className=\"movieDetails\">\n          <div className=\"Poster\">\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n              alt=\"\"\n            />\n          </div>\n          <div>\n            <h2>{movie.title || movie.name}</h2>\n            <p>User score: {Math.round(movie.vote_average)}/10</p>\n            <div>\n              <h3>Overview</h3>\n              <p>{movie.overview}</p>\n            </div>\n            <div>\n              <h3>Genres</h3>\n              <p>\n                {movie.genres.map(genre => (\n                  <span key={genre.id}>{genre.name}, </span>\n                ))}\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"castAndReviews\">\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <NavLink to=\"cast\">Cast</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\">Reviews</NavLink>\n            </li>\n          </ul>\n        </div>\n        <Suspense fallback={<p>Loading page...</p>}>\n          <Outlet />\n        </Suspense>\n      </main>\n    );\n  }\n}\n","export default async function fetchData(api) {\n  try {\n    const data = await fetch(api);\n    const response = await data.json();\n    return response;\n  } catch (error) {\n    return Promise.reject(new Error(error.message));\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["MovieDetails","useState","movie","setMovie","error","setError","status","setStatus","movieId","useParams","navigate","useNavigate","getMovies","id","fetchData","response","message","useEffect","className","type","onClick","src","poster_path","alt","title","name","Math","round","vote_average","overview","genres","map","genre","to","Suspense","fallback","api","fetch","data","json","Promise","reject","Error","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","done","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}