{"version":3,"file":"static/js/247.b4e34c06.chunk.js","mappings":"qPAIe,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,QAArC,eAAOK,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAS,mCAAG,WAAMC,GAAN,8EAChBJ,EAAU,WADM,mBAGSK,EAAAA,EAAAA,GAAW,sCAAD,OACOD,EADP,sDAHnB,OAGRE,EAHQ,OAMdR,EAAS,SACTF,EAAUU,EAASC,MACnBP,EAAU,YARI,kDAUdF,EAAS,KAAMU,SACfR,EAAU,YAXI,0DAAH,sDAkBf,OAJAS,EAAAA,EAAAA,YAAU,WACRN,EAAUF,EACX,GAAE,CAACA,IAEW,YAAXF,GACK,sCAEM,aAAXA,GACK,uBAAIF,IAEE,aAAXE,GAEA,wBACGJ,EAAOe,KAAI,SAAAC,GAAK,OACf,0BACIA,EAAMC,cAGN,gBACEC,IAAG,0CAAqCF,EAAMC,aAA3C,6CACHE,IAAKH,EAAMI,QAJb,+CAOF,uBAAIJ,EAAMI,QACV,uCAAeJ,EAAMK,eAVdL,EAAMP,GADA,WAHvB,CAoBD,C,qFCtDc,SAAea,EAA9B,+CAAe,OAAf,oBAAe,WAAyBC,GAAzB,kGAEQC,MAAMD,GAFd,cAELE,EAFK,gBAGYA,EAAKC,OAHjB,cAGLf,EAHK,yBAIJA,GAJI,2DAMJgB,QAAQC,OAAO,IAAIC,MAAM,KAAMhB,WAN3B,iF,sBCAf,SAASiB,EAAmBC,EAAKC,EAASJ,EAAQK,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOpC,GAEP,YADA0B,EAAO1B,EAET,CAEImC,EAAKE,KACPP,EAAQM,GAERX,QAAQK,QAAQM,GAAOE,KAAKP,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAInB,SAAQ,SAAUK,EAASJ,GACpC,IAAIG,EAAMW,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbR,EAAmBC,EAAKC,EAASJ,EAAQK,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdlB,EAAmBC,EAAKC,EAASJ,EAAQK,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","fetchData.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport fetchUsers from '../../fetchData';\nimport { useParams } from 'react-router-dom';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n\n  const getActors = async id => {\n    setStatus('pending');\n    try {\n      const response = await fetchUsers(\n        `https://api.themoviedb.org/3/movie/${id}/credits?api_key=ee0ed139d0a1d8fcbabd26e40efda78c`\n      );\n      setError('false');\n      setActors(response.cast);\n      setStatus('resolved');\n    } catch (error) {\n      setError(error.message);\n      setStatus('rejected');\n    }\n  };\n  useEffect(() => {\n    getActors(movieId);\n  }, [movieId]);\n\n  if (status === 'pending') {\n    return <p>Loading...</p>;\n  }\n  if (status === 'rejected') {\n    return <p>{error}</p>;\n  }\n  if (status === 'resolved') {\n    return (\n      <ul>\n        {actors.map(actor => (\n          <li key={actor.id}>\n            {!actor.profile_path ? (\n              <p>No image available</p>\n            ) : (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}?api_key=ee0ed139d0a1d8fcbabd26e40efda78c`}\n                alt={actor.name}\n              />\n            )}\n            <p>{actor.name}</p>\n            <p>Character: {actor.character}</p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n","export default async function fetchData(api) {\n  try {\n    const data = await fetch(api);\n    const response = await data.json();\n    return response;\n  } catch (error) {\n    return Promise.reject(new Error(error.message));\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Cast","useState","actors","setActors","error","setError","status","setStatus","movieId","useParams","getActors","id","fetchUsers","response","cast","message","useEffect","map","actor","profile_path","src","alt","name","character","fetchData","api","fetch","data","json","Promise","reject","Error","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","done","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}